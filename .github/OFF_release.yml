# name: Release Workflow

# on:
#   push:
#     tags:
#       - v*

# jobs:
#   build-android:
#     # Configuration
#     name: "Build Android üèó "
#     env:
#       GO111MODULE: on
#       GOMOD: ${{ github.workspace }}/go.mod
#       MOD_CACHE: ~/go/pkg/mod
#       BUILD_CACHE: ~/.cache/go-build
#     runs-on: ubuntu-latest

#     # Steps
#     steps:
#       - name: Checkout Repo
#         uses: actions/checkout@v2
#         with:
#           fetch-depth: 0
#       - name: Setup Go Env
#         uses: actions/setup-go@v2
#         with:
#           go-version: 1.17
#       - name: Setup and Bind AAR
#         run: |
#           mkdir -p ${{ github.workspace }}/release
#           go install golang.org/x/mobile/cmd/gomobile@latest
#           gomobile init
#           cd ${{ github.workspace }}/cmd/motor
#           gomobile bind -ldflags='-s -w' -target=android -o ${{ github.workspace }}/release/io.sonr.motor.aar
#       - name: Upload AAR to GitHub
#         uses: actions/upload-artifact@v2
#         with:
#           name: android-aar
#           path: ${{ github.workspace }}/release/io.sonr.motor.aar

#   # Bind iOS Framework
#   build-ios:
#     # Configuration
#     name: "Build iOS üèó "
#     env:
#       GO111MODULE: on
#       GOMOD: ${{ github.workspace }}/go.mod
#       MOD_CACHE: ~/go/pkg/mod
#       BUILD_CACHE: ~/Library/Caches/go-build
#     runs-on: macos-latest

#     # Steps
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v2
#         with:
#           fetch-depth: 0
#       - name: Setup Go Env
#         uses: actions/setup-go@v2
#         with:
#           go-version: 1.17
#       - name: Setup and Bind
#         run: |
#           mkdir -p ${{ github.workspace }}/release
#           go install golang.org/x/mobile/cmd/gomobile@latest
#           gomobile init
#           cd ${{ github.workspace }}/cmd/motor
#           gomobile bind -ldflags='-s -w' -target=ios -bundleid=io.sonr.motor -o ${{ github.workspace }}/release/SonrMotor.xcframework
#       - name: Upload Framework to GitHub
#         uses: actions/upload-artifact@v2
#         with:
#           name: ios-framework
#           path: ${{ github.workspace }}/release/SonrMotor.xcframework/

#   # Add Frameworks to Release
#   release-frameworks:
#     # Configuration
#     needs: [build-android, build-ios]
#     name: "Release Frameworks üì¢ "
#     runs-on: ubuntu-latest

#     # Steps
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#         with:
#           fetch-depth: 0

#       - run: mkdir -p ${{ github.workspace }}/release/SonrMotor.xcframework
#         # 2. Download AAR Artifact
#       - name: Download Android AAR
#         uses: actions/download-artifact@v2
#         with:
#           name: android-aar
#           path: ${{ github.workspace }}/release

#         # 3. Download Framework Artifact
#       - name: Download iOS Framework
#         uses: actions/download-artifact@v2
#         with:
#           name: ios-framework
#           path: ${{ github.workspace }}/release/SonrMotor.xcframework

#       # 4. Get Version
#       - id: get_version
#         uses: battila7/get-version-action@v2

#         # 5. Zip Framework and AAR
#       - name: Zip Android AAR and iOS Framework
#         run: |
#           cd ${{ github.workspace }}/release && zip -r $ANDROID_ZIP io.sonr.motor.aar
#           cd ${{ github.workspace }}/release && zip -r $IOS_ZIP SonrMotor.xcframework
#         env:
#           ANDROID_ZIP: sonr_motor_${{ steps.get_version.outputs.version-without-v }}_android.zip
#           IOS_ZIP: sonr_motor_${{ steps.get_version.outputs.version-without-v }}_ios.zip

#       - name: Create the "latest" Release
#         uses: ncipollo/release-action@v1
#         with:
#           allowUpdates: true
#           artifacts: "${{ github.workspace }}/release/*.zip"
#           replacesArtifacts: false
#           name: ${{ steps.vars.outputs.tag_name }}
#           token: ${{ secrets.ACTIONS_GH_TOKEN }}

#   release-blockchain:
#     name: "Publish Blockchain üì¢ "
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#         with:
#           fetch-depth: 0
#       - uses: actions/setup-go@v2
#       - name: Prepare Release Variables
#         id: vars
#         uses: tendermint/starport/actions/release/vars@develop

#       - name: Issue Release Assets
#         uses: tendermint/starport/actions/cli@develop
#         if: ${{ steps.vars.outputs.should_release == 'true' }}
#         with:
#           args: chain build --release --release.prefix ${{ steps.vars.outputs.tarball_prefix }} -t linux:amd64 -t darwin:amd64

#       - name: Delete the "latest" Release
#         uses: dev-drprasad/delete-tag-and-release@v0.2.0
#         if: ${{ steps.vars.outputs.is_release_type_latest == 'true' }}
#         with:
#           tag_name: ${{ steps.vars.outputs.tag_name }}
#           delete_release: true
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#       - uses: actions/setup-node@v1
#         with:
#           node-version: 16
#       - run: |
#          npm install -g yarn
#          yarn install --frozen-lockfile
#          yarn export
#         working-directory: ${{ github.workspace }}/cmd/sonrd/frontend/nextjs

#       -
#         name: Run GoReleaser
#         uses: goreleaser/goreleaser-action@v2
#         if: ${{ steps.vars.outputs.should_release == 'true' }}
#         with:
#           distribution: goreleaser
#           version: latest
#           args: release --rm-dist
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
