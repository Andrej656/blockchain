// @generated by protobuf-ts 2.2.1 with parameter long_type_string,generate_dependencies
// @generated from protobuf file "bucket/bucket.proto" (package "sonrio.sonr.bucket", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Peer } from "../registry/peer";
import { ObjectDoc } from "../object/object";
import { Did } from "../registry/did";
/**
 * Bucket is a collection of objects.
 *
 * @generated from protobuf message sonrio.sonr.bucket.Bucket
 */
export interface Bucket {
    /**
     * Label is human-readable name of the bucket.
     *
     * @generated from protobuf field: string label = 1;
     */
    label: string;
    /**
     * Description is a human-readable description of the bucket.
     *
     * @generated from protobuf field: string description = 2;
     */
    description: string;
    /**
     * Type is the kind of bucket for either App specific or User specific data.
     *
     * @generated from protobuf field: sonrio.sonr.bucket.BucketType type = 3;
     */
    type: BucketType;
    /**
     * Did is the identifier of the bucket.
     *
     * @generated from protobuf field: sonrio.sonr.registry.Did did = 4;
     */
    did?: Did;
    /**
     * Objects are stored in a tree structure.
     *
     * @generated from protobuf field: repeated sonrio.sonr.object.ObjectDoc objects = 5;
     */
    objects: ObjectDoc[];
}
/**
 * BucketEvent is the base event type for all Bucket events.
 *
 * @generated from protobuf message sonrio.sonr.bucket.BucketEvent
 */
export interface BucketEvent {
    /**
     * Owner is the peer that originated the event.
     *
     * @generated from protobuf field: sonrio.sonr.registry.Peer peer = 1;
     */
    peer?: Peer;
    /**
     * Type is the type of event being performed on a Bucket.
     *
     * @generated from protobuf field: sonrio.sonr.bucket.BucketEventType type = 2;
     */
    type: BucketEventType;
    /**
     * Object is the entry being modified in the Bucket.
     *
     * @generated from protobuf field: sonrio.sonr.object.ObjectDoc object = 3;
     */
    object?: ObjectDoc;
    /**
     * Metadata is the metadata associated with the event.
     *
     * @generated from protobuf field: map<string, string> metadata = 4;
     */
    metadata: {
        [key: string]: string;
    };
}
/**
 * BucketType is the type of a bucket.
 *
 * @generated from protobuf enum sonrio.sonr.bucket.BucketType
 */
export enum BucketType {
    /**
     * BucketTypeUnspecified is the default value.
     *
     * @generated from protobuf enum value: BUCKET_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * BucketTypeApp is an App specific bucket. For Assets regarding the service.
     *
     * @generated from protobuf enum value: BUCKET_TYPE_APP = 1;
     */
    APP = 1,
    /**
     * BucketTypeUser is a User specific bucket. For any remote user data that is required
     * to be stored in the Network.
     *
     * @generated from protobuf enum value: BUCKET_TYPE_USER = 2;
     */
    USER = 2
}
/**
 * EventType is the type of event being performed on a Bucket.
 *
 * @generated from protobuf enum sonrio.sonr.bucket.BucketEventType
 */
export enum BucketEventType {
    /**
     * EventTypeUnspecified is the default value.
     *
     * @generated from protobuf enum value: Bucket_EVENT_TYPE_UNSPECIFIED = 0;
     */
    Bucket_EVENT_TYPE_UNSPECIFIED = 0,
    /**
     * EventTypeGet is a get event being performed on a Bucket record.
     *
     * @generated from protobuf enum value: Bucket_EVENT_TYPE_GET = 1;
     */
    Bucket_EVENT_TYPE_GET = 1,
    /**
     * EventTypeSet is a set event on the Bucket store.
     *
     * @generated from protobuf enum value: Bucket_EVENT_TYPE_SET = 2;
     */
    Bucket_EVENT_TYPE_SET = 2,
    /**
     * EventTypeDelete is a delete event on the Bucket store.
     *
     * @generated from protobuf enum value: Bucket_EVENT_TYPE_DELETE = 3;
     */
    Bucket_EVENT_TYPE_DELETE = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class Bucket$Type extends MessageType<Bucket> {
    constructor() {
        super("sonrio.sonr.bucket.Bucket", [
            { no: 1, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "enum", T: () => ["sonrio.sonr.bucket.BucketType", BucketType, "BUCKET_TYPE_"] },
            { no: 4, name: "did", kind: "message", T: () => Did },
            { no: 5, name: "objects", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ObjectDoc }
        ]);
    }
    create(value?: PartialMessage<Bucket>): Bucket {
        const message = { label: "", description: "", type: 0, objects: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Bucket>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Bucket): Bucket {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string label */ 1:
                    message.label = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* sonrio.sonr.bucket.BucketType type */ 3:
                    message.type = reader.int32();
                    break;
                case /* sonrio.sonr.registry.Did did */ 4:
                    message.did = Did.internalBinaryRead(reader, reader.uint32(), options, message.did);
                    break;
                case /* repeated sonrio.sonr.object.ObjectDoc objects */ 5:
                    message.objects.push(ObjectDoc.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Bucket, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string label = 1; */
        if (message.label !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.label);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* sonrio.sonr.bucket.BucketType type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* sonrio.sonr.registry.Did did = 4; */
        if (message.did)
            Did.internalBinaryWrite(message.did, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated sonrio.sonr.object.ObjectDoc objects = 5; */
        for (let i = 0; i < message.objects.length; i++)
            ObjectDoc.internalBinaryWrite(message.objects[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.bucket.Bucket
 */
export const Bucket = new Bucket$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BucketEvent$Type extends MessageType<BucketEvent> {
    constructor() {
        super("sonrio.sonr.bucket.BucketEvent", [
            { no: 1, name: "peer", kind: "message", T: () => Peer },
            { no: 2, name: "type", kind: "enum", T: () => ["sonrio.sonr.bucket.BucketEventType", BucketEventType] },
            { no: 3, name: "object", kind: "message", T: () => ObjectDoc },
            { no: 4, name: "metadata", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<BucketEvent>): BucketEvent {
        const message = { type: 0, metadata: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BucketEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BucketEvent): BucketEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* sonrio.sonr.registry.Peer peer */ 1:
                    message.peer = Peer.internalBinaryRead(reader, reader.uint32(), options, message.peer);
                    break;
                case /* sonrio.sonr.bucket.BucketEventType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* sonrio.sonr.object.ObjectDoc object */ 3:
                    message.object = ObjectDoc.internalBinaryRead(reader, reader.uint32(), options, message.object);
                    break;
                case /* map<string, string> metadata */ 4:
                    this.binaryReadMap4(message.metadata, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: BucketEvent["metadata"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof BucketEvent["metadata"] | undefined, val: BucketEvent["metadata"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field sonrio.sonr.bucket.BucketEvent.metadata");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: BucketEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* sonrio.sonr.registry.Peer peer = 1; */
        if (message.peer)
            Peer.internalBinaryWrite(message.peer, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* sonrio.sonr.bucket.BucketEventType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* sonrio.sonr.object.ObjectDoc object = 3; */
        if (message.object)
            ObjectDoc.internalBinaryWrite(message.object, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> metadata = 4; */
        for (let k of Object.keys(message.metadata))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.metadata[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.bucket.BucketEvent
 */
export const BucketEvent = new BucketEvent$Type();
