// @generated by protobuf-ts 2.2.1 with parameter long_type_string,generate_dependencies
// @generated from protobuf file "channel/tx.proto" (package "sonrio.sonr.channel", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Msg } from "./tx";
import type { MsgUpdateChannelResponse } from "./tx";
import type { MsgUpdateChannel } from "./tx";
import type { MsgDeleteChannelResponse } from "./tx";
import type { MsgDeleteChannel } from "./tx";
import type { MsgReadChannelResponse } from "./tx";
import type { MsgReadChannel } from "./tx";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { MsgCreateChannelResponse } from "./tx";
import type { MsgCreateChannel } from "./tx";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Msg defines the Msg service.
 *
 * @generated from protobuf service sonrio.sonr.channel.Msg
 */
export interface IMsgClient {
    /**
     * @generated from protobuf rpc: CreateChannel(sonrio.sonr.channel.MsgCreateChannel) returns (sonrio.sonr.channel.MsgCreateChannelResponse);
     */
    createChannel(input: MsgCreateChannel, options?: RpcOptions): UnaryCall<MsgCreateChannel, MsgCreateChannelResponse>;
    /**
     * @generated from protobuf rpc: ReadChannel(sonrio.sonr.channel.MsgReadChannel) returns (sonrio.sonr.channel.MsgReadChannelResponse);
     */
    readChannel(input: MsgReadChannel, options?: RpcOptions): UnaryCall<MsgReadChannel, MsgReadChannelResponse>;
    /**
     * @generated from protobuf rpc: DeleteChannel(sonrio.sonr.channel.MsgDeleteChannel) returns (sonrio.sonr.channel.MsgDeleteChannelResponse);
     */
    deleteChannel(input: MsgDeleteChannel, options?: RpcOptions): UnaryCall<MsgDeleteChannel, MsgDeleteChannelResponse>;
    /**
     * this line is used by starport scaffolding # proto/tx/rpc
     *
     * @generated from protobuf rpc: UpdateChannel(sonrio.sonr.channel.MsgUpdateChannel) returns (sonrio.sonr.channel.MsgUpdateChannelResponse);
     */
    updateChannel(input: MsgUpdateChannel, options?: RpcOptions): UnaryCall<MsgUpdateChannel, MsgUpdateChannelResponse>;
}
/**
 * Msg defines the Msg service.
 *
 * @generated from protobuf service sonrio.sonr.channel.Msg
 */
export class MsgClient implements IMsgClient, ServiceInfo {
    typeName = Msg.typeName;
    methods = Msg.methods;
    options = Msg.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateChannel(sonrio.sonr.channel.MsgCreateChannel) returns (sonrio.sonr.channel.MsgCreateChannelResponse);
     */
    createChannel(input: MsgCreateChannel, options?: RpcOptions): UnaryCall<MsgCreateChannel, MsgCreateChannelResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgCreateChannel, MsgCreateChannelResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ReadChannel(sonrio.sonr.channel.MsgReadChannel) returns (sonrio.sonr.channel.MsgReadChannelResponse);
     */
    readChannel(input: MsgReadChannel, options?: RpcOptions): UnaryCall<MsgReadChannel, MsgReadChannelResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgReadChannel, MsgReadChannelResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteChannel(sonrio.sonr.channel.MsgDeleteChannel) returns (sonrio.sonr.channel.MsgDeleteChannelResponse);
     */
    deleteChannel(input: MsgDeleteChannel, options?: RpcOptions): UnaryCall<MsgDeleteChannel, MsgDeleteChannelResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgDeleteChannel, MsgDeleteChannelResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * this line is used by starport scaffolding # proto/tx/rpc
     *
     * @generated from protobuf rpc: UpdateChannel(sonrio.sonr.channel.MsgUpdateChannel) returns (sonrio.sonr.channel.MsgUpdateChannelResponse);
     */
    updateChannel(input: MsgUpdateChannel, options?: RpcOptions): UnaryCall<MsgUpdateChannel, MsgUpdateChannelResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgUpdateChannel, MsgUpdateChannelResponse>("unary", this._transport, method, opt, input);
    }
}
