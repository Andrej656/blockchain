// @generated by protobuf-ts 2.2.1 with parameter long_type_string,generate_dependencies
// @generated from protobuf file "object/tx.proto" (package "sonrio.sonr.object", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ObjectField } from "./object";
/**
 * @generated from protobuf message sonrio.sonr.object.MsgCreateObject
 */
export interface MsgCreateObject {
    /**
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * @generated from protobuf field: string label = 2;
     */
    label: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: repeated sonrio.sonr.object.ObjectField fields = 4;
     */
    fields: ObjectField[];
}
/**
 * @generated from protobuf message sonrio.sonr.object.MsgCreateObjectResponse
 */
export interface MsgCreateObjectResponse {
}
/**
 * @generated from protobuf message sonrio.sonr.object.MsgReadObject
 */
export interface MsgReadObject {
    /**
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * @generated from protobuf field: string did = 2;
     */
    did: string;
}
/**
 * @generated from protobuf message sonrio.sonr.object.MsgReadObjectResponse
 */
export interface MsgReadObjectResponse {
}
/**
 * @generated from protobuf message sonrio.sonr.object.MsgUpdateObject
 */
export interface MsgUpdateObject {
    /**
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * @generated from protobuf field: string did = 2;
     */
    did: string;
}
/**
 * @generated from protobuf message sonrio.sonr.object.MsgUpdateObjectResponse
 */
export interface MsgUpdateObjectResponse {
}
/**
 * @generated from protobuf message sonrio.sonr.object.MsgDeleteObject
 */
export interface MsgDeleteObject {
    /**
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * @generated from protobuf field: string did = 2;
     */
    did: string;
    /**
     * @generated from protobuf field: string publicKey = 3;
     */
    publicKey: string;
}
/**
 * @generated from protobuf message sonrio.sonr.object.MsgDeleteObjectResponse
 */
export interface MsgDeleteObjectResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class MsgCreateObject$Type extends MessageType<MsgCreateObject> {
    constructor() {
        super("sonrio.sonr.object.MsgCreateObject", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "fields", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ObjectField }
        ]);
    }
    create(value?: PartialMessage<MsgCreateObject>): MsgCreateObject {
        const message = { creator: "", label: "", description: "", fields: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgCreateObject>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgCreateObject): MsgCreateObject {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* string label */ 2:
                    message.label = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* repeated sonrio.sonr.object.ObjectField fields */ 4:
                    message.fields.push(ObjectField.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgCreateObject, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* string label = 2; */
        if (message.label !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.label);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* repeated sonrio.sonr.object.ObjectField fields = 4; */
        for (let i = 0; i < message.fields.length; i++)
            ObjectField.internalBinaryWrite(message.fields[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.object.MsgCreateObject
 */
export const MsgCreateObject = new MsgCreateObject$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgCreateObjectResponse$Type extends MessageType<MsgCreateObjectResponse> {
    constructor() {
        super("sonrio.sonr.object.MsgCreateObjectResponse", []);
    }
    create(value?: PartialMessage<MsgCreateObjectResponse>): MsgCreateObjectResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgCreateObjectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgCreateObjectResponse): MsgCreateObjectResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgCreateObjectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.object.MsgCreateObjectResponse
 */
export const MsgCreateObjectResponse = new MsgCreateObjectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgReadObject$Type extends MessageType<MsgReadObject> {
    constructor() {
        super("sonrio.sonr.object.MsgReadObject", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MsgReadObject>): MsgReadObject {
        const message = { creator: "", did: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgReadObject>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgReadObject): MsgReadObject {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* string did */ 2:
                    message.did = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgReadObject, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* string did = 2; */
        if (message.did !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.did);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.object.MsgReadObject
 */
export const MsgReadObject = new MsgReadObject$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgReadObjectResponse$Type extends MessageType<MsgReadObjectResponse> {
    constructor() {
        super("sonrio.sonr.object.MsgReadObjectResponse", []);
    }
    create(value?: PartialMessage<MsgReadObjectResponse>): MsgReadObjectResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgReadObjectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgReadObjectResponse): MsgReadObjectResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgReadObjectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.object.MsgReadObjectResponse
 */
export const MsgReadObjectResponse = new MsgReadObjectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgUpdateObject$Type extends MessageType<MsgUpdateObject> {
    constructor() {
        super("sonrio.sonr.object.MsgUpdateObject", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MsgUpdateObject>): MsgUpdateObject {
        const message = { creator: "", did: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgUpdateObject>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgUpdateObject): MsgUpdateObject {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* string did */ 2:
                    message.did = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgUpdateObject, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* string did = 2; */
        if (message.did !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.did);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.object.MsgUpdateObject
 */
export const MsgUpdateObject = new MsgUpdateObject$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgUpdateObjectResponse$Type extends MessageType<MsgUpdateObjectResponse> {
    constructor() {
        super("sonrio.sonr.object.MsgUpdateObjectResponse", []);
    }
    create(value?: PartialMessage<MsgUpdateObjectResponse>): MsgUpdateObjectResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgUpdateObjectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgUpdateObjectResponse): MsgUpdateObjectResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgUpdateObjectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.object.MsgUpdateObjectResponse
 */
export const MsgUpdateObjectResponse = new MsgUpdateObjectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgDeleteObject$Type extends MessageType<MsgDeleteObject> {
    constructor() {
        super("sonrio.sonr.object.MsgDeleteObject", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "publicKey", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MsgDeleteObject>): MsgDeleteObject {
        const message = { creator: "", did: "", publicKey: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgDeleteObject>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgDeleteObject): MsgDeleteObject {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* string did */ 2:
                    message.did = reader.string();
                    break;
                case /* string publicKey */ 3:
                    message.publicKey = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgDeleteObject, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* string did = 2; */
        if (message.did !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.did);
        /* string publicKey = 3; */
        if (message.publicKey !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.publicKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.object.MsgDeleteObject
 */
export const MsgDeleteObject = new MsgDeleteObject$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgDeleteObjectResponse$Type extends MessageType<MsgDeleteObjectResponse> {
    constructor() {
        super("sonrio.sonr.object.MsgDeleteObjectResponse", []);
    }
    create(value?: PartialMessage<MsgDeleteObjectResponse>): MsgDeleteObjectResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgDeleteObjectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgDeleteObjectResponse): MsgDeleteObjectResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgDeleteObjectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.object.MsgDeleteObjectResponse
 */
export const MsgDeleteObjectResponse = new MsgDeleteObjectResponse$Type();
/**
 * @generated ServiceType for protobuf service sonrio.sonr.object.Msg
 */
export const Msg = new ServiceType("sonrio.sonr.object.Msg", [
    { name: "CreateObject", options: {}, I: MsgCreateObject, O: MsgCreateObjectResponse },
    { name: "ReadObject", options: {}, I: MsgReadObject, O: MsgReadObjectResponse },
    { name: "UpdateObject", options: {}, I: MsgUpdateObject, O: MsgUpdateObjectResponse },
    { name: "DeleteObject", options: {}, I: MsgDeleteObject, O: MsgDeleteObjectResponse }
]);
