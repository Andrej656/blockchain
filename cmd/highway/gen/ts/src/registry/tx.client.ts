// @generated by protobuf-ts 2.2.1 with parameter long_type_string,generate_dependencies
// @generated from protobuf file "registry/tx.proto" (package "sonrio.sonr.registry", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Msg } from "./tx";
import type { MsgUpdateServiceResponse } from "./tx";
import type { MsgUpdateService } from "./tx";
import type { MsgAccessServiceResponse } from "./tx";
import type { MsgAccessService } from "./tx";
import type { MsgUpdateNameResponse } from "./tx";
import type { MsgUpdateName } from "./tx";
import type { MsgAccessNameResponse } from "./tx";
import type { MsgAccessName } from "./tx";
import type { MsgRegisterNameResponse } from "./tx";
import type { MsgRegisterName } from "./tx";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { MsgRegisterServiceResponse } from "./tx";
import type { MsgRegisterService } from "./tx";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Msg defines the Msg service.
 *
 * @generated from protobuf service sonrio.sonr.registry.Msg
 */
export interface IMsgClient {
    /**
     * @generated from protobuf rpc: RegisterService(sonrio.sonr.registry.MsgRegisterService) returns (sonrio.sonr.registry.MsgRegisterServiceResponse);
     */
    registerService(input: MsgRegisterService, options?: RpcOptions): UnaryCall<MsgRegisterService, MsgRegisterServiceResponse>;
    /**
     * @generated from protobuf rpc: RegisterName(sonrio.sonr.registry.MsgRegisterName) returns (sonrio.sonr.registry.MsgRegisterNameResponse);
     */
    registerName(input: MsgRegisterName, options?: RpcOptions): UnaryCall<MsgRegisterName, MsgRegisterNameResponse>;
    /**
     * @generated from protobuf rpc: AccessName(sonrio.sonr.registry.MsgAccessName) returns (sonrio.sonr.registry.MsgAccessNameResponse);
     */
    accessName(input: MsgAccessName, options?: RpcOptions): UnaryCall<MsgAccessName, MsgAccessNameResponse>;
    /**
     * @generated from protobuf rpc: UpdateName(sonrio.sonr.registry.MsgUpdateName) returns (sonrio.sonr.registry.MsgUpdateNameResponse);
     */
    updateName(input: MsgUpdateName, options?: RpcOptions): UnaryCall<MsgUpdateName, MsgUpdateNameResponse>;
    /**
     * @generated from protobuf rpc: AccessService(sonrio.sonr.registry.MsgAccessService) returns (sonrio.sonr.registry.MsgAccessServiceResponse);
     */
    accessService(input: MsgAccessService, options?: RpcOptions): UnaryCall<MsgAccessService, MsgAccessServiceResponse>;
    /**
     * this line is used by starport scaffolding # proto/tx/rpc
     *
     * @generated from protobuf rpc: UpdateService(sonrio.sonr.registry.MsgUpdateService) returns (sonrio.sonr.registry.MsgUpdateServiceResponse);
     */
    updateService(input: MsgUpdateService, options?: RpcOptions): UnaryCall<MsgUpdateService, MsgUpdateServiceResponse>;
}
/**
 * Msg defines the Msg service.
 *
 * @generated from protobuf service sonrio.sonr.registry.Msg
 */
export class MsgClient implements IMsgClient, ServiceInfo {
    typeName = Msg.typeName;
    methods = Msg.methods;
    options = Msg.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: RegisterService(sonrio.sonr.registry.MsgRegisterService) returns (sonrio.sonr.registry.MsgRegisterServiceResponse);
     */
    registerService(input: MsgRegisterService, options?: RpcOptions): UnaryCall<MsgRegisterService, MsgRegisterServiceResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgRegisterService, MsgRegisterServiceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RegisterName(sonrio.sonr.registry.MsgRegisterName) returns (sonrio.sonr.registry.MsgRegisterNameResponse);
     */
    registerName(input: MsgRegisterName, options?: RpcOptions): UnaryCall<MsgRegisterName, MsgRegisterNameResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgRegisterName, MsgRegisterNameResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AccessName(sonrio.sonr.registry.MsgAccessName) returns (sonrio.sonr.registry.MsgAccessNameResponse);
     */
    accessName(input: MsgAccessName, options?: RpcOptions): UnaryCall<MsgAccessName, MsgAccessNameResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgAccessName, MsgAccessNameResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateName(sonrio.sonr.registry.MsgUpdateName) returns (sonrio.sonr.registry.MsgUpdateNameResponse);
     */
    updateName(input: MsgUpdateName, options?: RpcOptions): UnaryCall<MsgUpdateName, MsgUpdateNameResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgUpdateName, MsgUpdateNameResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AccessService(sonrio.sonr.registry.MsgAccessService) returns (sonrio.sonr.registry.MsgAccessServiceResponse);
     */
    accessService(input: MsgAccessService, options?: RpcOptions): UnaryCall<MsgAccessService, MsgAccessServiceResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgAccessService, MsgAccessServiceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * this line is used by starport scaffolding # proto/tx/rpc
     *
     * @generated from protobuf rpc: UpdateService(sonrio.sonr.registry.MsgUpdateService) returns (sonrio.sonr.registry.MsgUpdateServiceResponse);
     */
    updateService(input: MsgUpdateService, options?: RpcOptions): UnaryCall<MsgUpdateService, MsgUpdateServiceResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgUpdateService, MsgUpdateServiceResponse>("unary", this._transport, method, opt, input);
    }
}
