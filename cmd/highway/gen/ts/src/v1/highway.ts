// @generated by protobuf-ts 2.2.1 with parameter long_type_string,generate_dependencies
// @generated from protobuf file "v1/highway.proto" (package "highway.v1", syntax proto3)
// tslint:disable
import { ResolveDidResponse } from "./response";
import { ResolveDidRequest } from "./request";
import { ParseDidResponse } from "./response";
import { ParseDidRequest } from "./request";
import { DeleteBlobResponse } from "./response";
import { DeleteBlobRequest } from "./request";
import { SyncBlobResponse } from "./response";
import { SyncBlobRequest } from "./request";
import { DownloadBlobResponse } from "./response";
import { DownloadBlobRequest } from "./request";
import { UploadBlobResponse } from "./response";
import { UploadBlobRequest } from "./request";
import { MsgDeleteObjectResponse } from "../object/tx";
import { MsgDeleteObject } from "../object/tx";
import { MsgUpdateObjectResponse } from "../object/tx";
import { MsgUpdateObject } from "../object/tx";
import { MsgReadObjectResponse } from "../object/tx";
import { MsgReadObject } from "../object/tx";
import { MsgCreateObjectResponse } from "../object/tx";
import { MsgCreateObject } from "../object/tx";
import { ListenBucketResponse } from "./response";
import { ListenBucketRequest } from "./request";
import { MsgDeleteBucketResponse } from "../bucket/tx";
import { MsgDeleteBucket } from "../bucket/tx";
import { MsgUpdateBucketResponse } from "../bucket/tx";
import { MsgUpdateBucket } from "../bucket/tx";
import { MsgReadBucketResponse } from "../bucket/tx";
import { MsgReadBucket } from "../bucket/tx";
import { MsgCreateBucketResponse } from "../bucket/tx";
import { MsgCreateBucket } from "../bucket/tx";
import { ChannelMessage } from "../channel/channel";
import { ListenChannelRequest } from "./request";
import { MsgDeleteChannelResponse } from "../channel/tx";
import { MsgDeleteChannel } from "../channel/tx";
import { MsgUpdateChannelResponse } from "../channel/tx";
import { MsgUpdateChannel } from "../channel/tx";
import { MsgReadChannelResponse } from "../channel/tx";
import { MsgReadChannel } from "../channel/tx";
import { MsgCreateChannelResponse } from "../channel/tx";
import { MsgCreateChannel } from "../channel/tx";
import { MsgUpdateServiceResponse } from "../registry/tx";
import { MsgUpdateService } from "../registry/tx";
import { MsgRegisterServiceResponse } from "../registry/tx";
import { MsgRegisterService } from "../registry/tx";
import { AccessServiceResponse } from "./response";
import { AccessServiceRequest } from "./request";
import { MsgUpdateNameResponse } from "../registry/tx";
import { MsgUpdateName } from "../registry/tx";
import { MsgRegisterNameResponse } from "../registry/tx";
import { MsgRegisterName } from "../registry/tx";
import { AccessNameResponse } from "./response";
import { AccessNameRequest } from "./request";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
/**
 * @generated ServiceType for protobuf service highway.v1.HighwayService
 */
export const HighwayService = new ServiceType("highway.v1.HighwayService", [
    { name: "AccessName", options: {}, I: AccessNameRequest, O: AccessNameResponse },
    { name: "RegisterName", options: {}, I: MsgRegisterName, O: MsgRegisterNameResponse },
    { name: "UpdateName", options: {}, I: MsgUpdateName, O: MsgUpdateNameResponse },
    { name: "AccessService", options: {}, I: AccessServiceRequest, O: AccessServiceResponse },
    { name: "RegisterService", options: {}, I: MsgRegisterService, O: MsgRegisterServiceResponse },
    { name: "UpdateService", options: {}, I: MsgUpdateService, O: MsgUpdateServiceResponse },
    { name: "CreateChannel", options: {}, I: MsgCreateChannel, O: MsgCreateChannelResponse },
    { name: "ReadChannel", options: {}, I: MsgReadChannel, O: MsgReadChannelResponse },
    { name: "UpdateChannel", options: {}, I: MsgUpdateChannel, O: MsgUpdateChannelResponse },
    { name: "DeleteChannel", options: {}, I: MsgDeleteChannel, O: MsgDeleteChannelResponse },
    { name: "ListenChannel", serverStreaming: true, options: {}, I: ListenChannelRequest, O: ChannelMessage },
    { name: "CreateBucket", options: {}, I: MsgCreateBucket, O: MsgCreateBucketResponse },
    { name: "ReadBucket", options: {}, I: MsgReadBucket, O: MsgReadBucketResponse },
    { name: "UpdateBucket", options: {}, I: MsgUpdateBucket, O: MsgUpdateBucketResponse },
    { name: "DeleteBucket", options: {}, I: MsgDeleteBucket, O: MsgDeleteBucketResponse },
    { name: "ListenBucket", serverStreaming: true, options: {}, I: ListenBucketRequest, O: ListenBucketResponse },
    { name: "CreateObject", options: {}, I: MsgCreateObject, O: MsgCreateObjectResponse },
    { name: "ReadObject", options: {}, I: MsgReadObject, O: MsgReadObjectResponse },
    { name: "UpdateObject", options: {}, I: MsgUpdateObject, O: MsgUpdateObjectResponse },
    { name: "DeleteObject", options: {}, I: MsgDeleteObject, O: MsgDeleteObjectResponse },
    { name: "UploadBlob", serverStreaming: true, options: {}, I: UploadBlobRequest, O: UploadBlobResponse },
    { name: "DownloadBlob", serverStreaming: true, options: {}, I: DownloadBlobRequest, O: DownloadBlobResponse },
    { name: "SyncBlob", serverStreaming: true, options: {}, I: SyncBlobRequest, O: SyncBlobResponse },
    { name: "DeleteBlob", options: {}, I: DeleteBlobRequest, O: DeleteBlobResponse },
    { name: "ParseDid", options: {}, I: ParseDidRequest, O: ParseDidResponse },
    { name: "ResolveDid", options: {}, I: ResolveDidRequest, O: ResolveDidResponse }
]);
