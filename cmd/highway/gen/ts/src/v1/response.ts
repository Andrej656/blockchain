// @generated by protobuf-ts 2.2.1 with parameter long_type_string,generate_dependencies
// @generated from protobuf file "v1/response.proto" (package "highway.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DidDocument } from "../registry/did";
import { ObjectDoc } from "../object/object";
import { Did } from "../registry/did";
import { Peer } from "../registry/peer";
/**
 * AccessNameResponse is a response to a request for a name
 *
 * @generated from protobuf message highway.v1.AccessNameResponse
 */
export interface AccessNameResponse {
    /**
     * Code of the response
     *
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * Message of the response
     *
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * Data of the response
     *
     * @generated from protobuf field: sonrio.sonr.registry.Peer peer = 3;
     */
    peer?: Peer;
}
/**
 * AccessServiceResponse is a response to a request for a service
 *
 * @generated from protobuf message highway.v1.AccessServiceResponse
 */
export interface AccessServiceResponse {
    /**
     * Code of the response
     *
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * Message of the response
     *
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * Data of the response
     *
     * @generated from protobuf field: map<string, string> metadata = 3;
     */
    metadata: {
        [key: string]: string;
    };
}
/**
 * ListenBucketResponse is a response of the published data to the bucket
 *
 * @generated from protobuf message highway.v1.ListenBucketResponse
 */
export interface ListenBucketResponse {
    /**
     * Code of the response
     *
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * DID of the response
     *
     * @generated from protobuf field: sonrio.sonr.registry.Did did = 2;
     */
    did?: Did;
    /**
     * Additional information about the response
     *
     * @generated from protobuf field: map<string, string> metadata = 3;
     */
    metadata: {
        [key: string]: string;
    }; // optional
    /**
     * Stream of objects in the bucket
     *
     * @generated from protobuf field: repeated sonrio.sonr.object.ObjectDoc objects = 4;
     */
    objects: ObjectDoc[]; // optional
}
/**
 * UploadBlobResponse is a response to a request to upload a blob
 *
 * @generated from protobuf message highway.v1.UploadBlobResponse
 */
export interface UploadBlobResponse {
    /**
     * Code of the response
     *
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * Message of the response
     *
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * DID of the response
     *
     * @generated from protobuf field: sonrio.sonr.registry.Did did = 3;
     */
    did?: Did;
    /**
     * Pinned is true if the blob is pinned to IPFS
     *
     * @generated from protobuf field: bool pinned = 4;
     */
    pinned: boolean;
}
/**
 * DownloadBlobResponse is a response to a request to download a blob
 *
 * @generated from protobuf message highway.v1.DownloadBlobResponse
 */
export interface DownloadBlobResponse {
    /**
     * Code of the response
     *
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * Message of the response
     *
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * DID of the response
     *
     * @generated from protobuf field: sonrio.sonr.registry.Did did = 3;
     */
    did?: Did;
    /**
     * Path of downloaded blob
     *
     * @generated from protobuf field: string path = 4;
     */
    path: string;
}
/**
 * SyncBlobResponse is a response to a request to sync a blob
 *
 * @generated from protobuf message highway.v1.SyncBlobResponse
 */
export interface SyncBlobResponse {
    /**
     * Code of the response
     *
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * Message of the response
     *
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * DID of the response
     *
     * @generated from protobuf field: sonrio.sonr.registry.Did did = 3;
     */
    did?: Did;
}
/**
 * DeleteBlobResponse is a response to a request to delete a blob
 *
 * @generated from protobuf message highway.v1.DeleteBlobResponse
 */
export interface DeleteBlobResponse {
    /**
     * Code of the response
     *
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * Message of the response
     *
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * DID of the response
     *
     * @generated from protobuf field: sonrio.sonr.registry.Did did = 3;
     */
    did?: Did;
}
/**
 * ParseDidResponse is a response to a request to parse a DID
 *
 * @generated from protobuf message highway.v1.ParseDidResponse
 */
export interface ParseDidResponse {
    /**
     * Code of the response
     *
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * Message of the response
     *
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * DID of the response
     *
     * @generated from protobuf field: sonrio.sonr.registry.Did did = 3;
     */
    did?: Did;
}
/**
 * ResolveDidResponse is a response to a request to resolve a DID
 *
 * @generated from protobuf message highway.v1.ResolveDidResponse
 */
export interface ResolveDidResponse {
    /**
     * Code of the response
     *
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * Message of the response
     *
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * DID of the response
     *
     * @generated from protobuf field: sonrio.sonr.registry.DidDocument did_document = 3;
     */
    didDocument?: DidDocument; // optional
}
// @generated message type with reflection information, may provide speed optimized methods
class AccessNameResponse$Type extends MessageType<AccessNameResponse> {
    constructor() {
        super("highway.v1.AccessNameResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "peer", kind: "message", T: () => Peer }
        ]);
    }
    create(value?: PartialMessage<AccessNameResponse>): AccessNameResponse {
        const message = { code: 0, message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AccessNameResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccessNameResponse): AccessNameResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* sonrio.sonr.registry.Peer peer */ 3:
                    message.peer = Peer.internalBinaryRead(reader, reader.uint32(), options, message.peer);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AccessNameResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* sonrio.sonr.registry.Peer peer = 3; */
        if (message.peer)
            Peer.internalBinaryWrite(message.peer, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message highway.v1.AccessNameResponse
 */
export const AccessNameResponse = new AccessNameResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccessServiceResponse$Type extends MessageType<AccessServiceResponse> {
    constructor() {
        super("highway.v1.AccessServiceResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "metadata", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<AccessServiceResponse>): AccessServiceResponse {
        const message = { code: 0, message: "", metadata: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AccessServiceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccessServiceResponse): AccessServiceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* map<string, string> metadata */ 3:
                    this.binaryReadMap3(message.metadata, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: AccessServiceResponse["metadata"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof AccessServiceResponse["metadata"] | undefined, val: AccessServiceResponse["metadata"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field highway.v1.AccessServiceResponse.metadata");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: AccessServiceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* map<string, string> metadata = 3; */
        for (let k of Object.keys(message.metadata))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.metadata[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message highway.v1.AccessServiceResponse
 */
export const AccessServiceResponse = new AccessServiceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenBucketResponse$Type extends MessageType<ListenBucketResponse> {
    constructor() {
        super("highway.v1.ListenBucketResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "did", kind: "message", T: () => Did },
            { no: 3, name: "metadata", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 4, name: "objects", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ObjectDoc }
        ]);
    }
    create(value?: PartialMessage<ListenBucketResponse>): ListenBucketResponse {
        const message = { code: 0, metadata: {}, objects: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListenBucketResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListenBucketResponse): ListenBucketResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* sonrio.sonr.registry.Did did */ 2:
                    message.did = Did.internalBinaryRead(reader, reader.uint32(), options, message.did);
                    break;
                case /* map<string, string> metadata */ 3:
                    this.binaryReadMap3(message.metadata, reader, options);
                    break;
                case /* repeated sonrio.sonr.object.ObjectDoc objects */ 4:
                    message.objects.push(ObjectDoc.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: ListenBucketResponse["metadata"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ListenBucketResponse["metadata"] | undefined, val: ListenBucketResponse["metadata"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field highway.v1.ListenBucketResponse.metadata");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: ListenBucketResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* sonrio.sonr.registry.Did did = 2; */
        if (message.did)
            Did.internalBinaryWrite(message.did, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> metadata = 3; */
        for (let k of Object.keys(message.metadata))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.metadata[k]).join();
        /* repeated sonrio.sonr.object.ObjectDoc objects = 4; */
        for (let i = 0; i < message.objects.length; i++)
            ObjectDoc.internalBinaryWrite(message.objects[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message highway.v1.ListenBucketResponse
 */
export const ListenBucketResponse = new ListenBucketResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadBlobResponse$Type extends MessageType<UploadBlobResponse> {
    constructor() {
        super("highway.v1.UploadBlobResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "did", kind: "message", T: () => Did },
            { no: 4, name: "pinned", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UploadBlobResponse>): UploadBlobResponse {
        const message = { code: 0, message: "", pinned: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UploadBlobResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadBlobResponse): UploadBlobResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* sonrio.sonr.registry.Did did */ 3:
                    message.did = Did.internalBinaryRead(reader, reader.uint32(), options, message.did);
                    break;
                case /* bool pinned */ 4:
                    message.pinned = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadBlobResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* sonrio.sonr.registry.Did did = 3; */
        if (message.did)
            Did.internalBinaryWrite(message.did, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool pinned = 4; */
        if (message.pinned !== false)
            writer.tag(4, WireType.Varint).bool(message.pinned);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message highway.v1.UploadBlobResponse
 */
export const UploadBlobResponse = new UploadBlobResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DownloadBlobResponse$Type extends MessageType<DownloadBlobResponse> {
    constructor() {
        super("highway.v1.DownloadBlobResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "did", kind: "message", T: () => Did },
            { no: 4, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DownloadBlobResponse>): DownloadBlobResponse {
        const message = { code: 0, message: "", path: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DownloadBlobResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DownloadBlobResponse): DownloadBlobResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* sonrio.sonr.registry.Did did */ 3:
                    message.did = Did.internalBinaryRead(reader, reader.uint32(), options, message.did);
                    break;
                case /* string path */ 4:
                    message.path = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DownloadBlobResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* sonrio.sonr.registry.Did did = 3; */
        if (message.did)
            Did.internalBinaryWrite(message.did, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string path = 4; */
        if (message.path !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.path);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message highway.v1.DownloadBlobResponse
 */
export const DownloadBlobResponse = new DownloadBlobResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SyncBlobResponse$Type extends MessageType<SyncBlobResponse> {
    constructor() {
        super("highway.v1.SyncBlobResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "did", kind: "message", T: () => Did }
        ]);
    }
    create(value?: PartialMessage<SyncBlobResponse>): SyncBlobResponse {
        const message = { code: 0, message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SyncBlobResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SyncBlobResponse): SyncBlobResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* sonrio.sonr.registry.Did did */ 3:
                    message.did = Did.internalBinaryRead(reader, reader.uint32(), options, message.did);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SyncBlobResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* sonrio.sonr.registry.Did did = 3; */
        if (message.did)
            Did.internalBinaryWrite(message.did, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message highway.v1.SyncBlobResponse
 */
export const SyncBlobResponse = new SyncBlobResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteBlobResponse$Type extends MessageType<DeleteBlobResponse> {
    constructor() {
        super("highway.v1.DeleteBlobResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "did", kind: "message", T: () => Did }
        ]);
    }
    create(value?: PartialMessage<DeleteBlobResponse>): DeleteBlobResponse {
        const message = { code: 0, message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteBlobResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteBlobResponse): DeleteBlobResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* sonrio.sonr.registry.Did did */ 3:
                    message.did = Did.internalBinaryRead(reader, reader.uint32(), options, message.did);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteBlobResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* sonrio.sonr.registry.Did did = 3; */
        if (message.did)
            Did.internalBinaryWrite(message.did, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message highway.v1.DeleteBlobResponse
 */
export const DeleteBlobResponse = new DeleteBlobResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParseDidResponse$Type extends MessageType<ParseDidResponse> {
    constructor() {
        super("highway.v1.ParseDidResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "did", kind: "message", T: () => Did }
        ]);
    }
    create(value?: PartialMessage<ParseDidResponse>): ParseDidResponse {
        const message = { code: 0, message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParseDidResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParseDidResponse): ParseDidResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* sonrio.sonr.registry.Did did */ 3:
                    message.did = Did.internalBinaryRead(reader, reader.uint32(), options, message.did);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParseDidResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* sonrio.sonr.registry.Did did = 3; */
        if (message.did)
            Did.internalBinaryWrite(message.did, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message highway.v1.ParseDidResponse
 */
export const ParseDidResponse = new ParseDidResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResolveDidResponse$Type extends MessageType<ResolveDidResponse> {
    constructor() {
        super("highway.v1.ResolveDidResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "did_document", kind: "message", T: () => DidDocument }
        ]);
    }
    create(value?: PartialMessage<ResolveDidResponse>): ResolveDidResponse {
        const message = { code: 0, message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResolveDidResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResolveDidResponse): ResolveDidResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* sonrio.sonr.registry.DidDocument did_document */ 3:
                    message.didDocument = DidDocument.internalBinaryRead(reader, reader.uint32(), options, message.didDocument);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResolveDidResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* sonrio.sonr.registry.DidDocument did_document = 3; */
        if (message.didDocument)
            DidDocument.internalBinaryWrite(message.didDocument, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message highway.v1.ResolveDidResponse
 */
export const ResolveDidResponse = new ResolveDidResponse$Type();
