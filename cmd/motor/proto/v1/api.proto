syntax = "proto3";

// Package Motor is used for defining a Motor node and its properties.
package motor.v1;
import "v1/api.proto";
import "registry/did.proto";
option go_package = "github.com/sonr-io/sonr/node/motor/v1";

// MsgAccess is used to request access to a service, or peer.
message MsgAccess {
    // The Name of the service that is being accessed.
    string service_name = 1;

    // The signature of the services public key signed by
    // the node's private key.
    bytes signature = 2;
}

// MsgAccessResponse is used to respond to a MsgAccess.
message MsgAccessResponse {
    // The DID of the service that is being accessed.
    int32 code = 1;

    // The Resulting DID Document of the access request.
    sonrio.sonr.registry did_document = 2;
}

// MsgRegister is used to register a service with the node.
message MsgRequest {
    // The api method to be called,
    string api_method = 1;
}

// MsgRegisterResponse is used to respond to a MsgRegister.
message MsgRequestResponse {
    // The DID of the service that is being registered.
    int32 code = 1;

    // The Resulting Registered Object of the request.
    sonrio.sonr.object.ObjectDoc object_doc = 2;

    // The JSON encoded result of the request.
    bytes result = 3;
}

// MsgProvision is used to request a service to be provisioned.
message MsgProvision {
    // The DID of the service that is being provisioned.
    string did = 1;

    // The signature of the services public key signed by
    // the node's private key.
    bytes signature = 2;

    // The Provision Action to be performed by the motor node.
    Action action = 3;

    enum Action {
        // The service is being provisioned.
        ACTION_UNSPECIFIED = 1;

        // The service is being updated.
        ACTION_ACCEPT = 2;

        // Action is to decline the request.
        ACTION_REJECT = 3;

        // Action is to cancel the request.
        ACTION_CANCEL = 4;

        // Action is to delete the request.
        ACTION_DELETE = 5;

        // Action is to update the request.
        ACTION_UPDATE = 6;
    }
}

// MsgPublish is used to publish a service to the node.
message MsgPublish {
    // The DID of the service that is being published.
    string did = 1;

    // Message to be published.
    sonrio.sonr.channel.ChannelMessage message = 2;
}

// MsgSubscribe is used to subscribe to a service.
message MsgSubscribe {
    // The DID of the service that is being subscribed to.
    string did = 1;

    // The signature of the services public key signed by
    // the node's private key.
    bytes signature = 2;
}

// MsgSubscribeResponse is used to respond to a MsgSubscribe.
message MsgSubscribeResponse {
    // The DID of the service that is being subscribed to.
    int32 code = 1;

    // The Resulting DID Document of the subscribe request.
    sonrio.sonr.registry did_document = 2;

    // Status is the current step of the subscription process.
    Status status = 3;

    // ObjectDoc is the registered object of the channel.
    sonrio.sonr.object.ObjectDoc object_doc = 4;

    // Status is the step in the Subcription process.
    enum Status {
        // The service is being subscribed to.
        STATUS_UNSPECIFIED = 1;

        // The service is being updated.
        STATUS_PENDING = 2;

        // Status is to decline the request.
        STATUS_OPEN = 3;

        // Status is to cancel the request.
        STATUS_CANCEL = 4;

        // Status is to delete the request.
        STATUS_CLOSE = 5;

        // Status is to update the request.
        STATUS_ERROR = 6;
    }
}
