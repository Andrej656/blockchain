{
  "swagger": "2.0",
  "info": {
    "title": "v1/request.proto",
    "description": "Package Highway is used for defining a Highway node and its properties.",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "HighwayService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {},
  "definitions": {
    "PeerDevice": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "hostName": {
          "type": "string"
        },
        "os": {
          "type": "string"
        },
        "arch": {
          "type": "string"
        },
        "model": {
          "type": "string"
        }
      },
      "title": "Peer Info for Device"
    },
    "VerificationMethodType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_ECDSA_SECP256K1",
        "TYPE_X25519",
        "TYPE_ED25519",
        "TYPE_BLS_12381_G1",
        "TYPE_BLS_12381_G2",
        "TYPE_RSA",
        "TYPE_VERIFIABLE_CONDITION"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": " - TYPE_UNSPECIFIED: TYPE_UNSPECIFIED is the default value.\n - TYPE_ECDSA_SECP256K1: TYPE_ECDSA_SECP256K1 represents the Ed25519VerificationKey2018 key type.\n - TYPE_X25519: TYPE_X25519 represents the X25519KeyAgreementKey2019 key type.\n - TYPE_ED25519: TYPE_ED25519 represents the Ed25519VerificationKey2018 key type.\n - TYPE_BLS_12381_G1: TYPE_BLS_12381_G1 represents the Bls12381G1Key2020 key type\n - TYPE_BLS_12381_G2: TYPE_BLS_12381_G2 represents the Bls12381G2Key2020 key type\n - TYPE_RSA: TYPE_RSA represents the RsaVerificationKey2018 key type.\n - TYPE_VERIFIABLE_CONDITION: TYPE_VERIFIABLE_CONDITION represents the VerifiableCondition2021 key type."
    },
    "bucketMsgCreateBucketResponse": {
      "type": "object"
    },
    "bucketMsgDeleteBucketResponse": {
      "type": "object"
    },
    "bucketMsgReadBucketResponse": {
      "type": "object"
    },
    "bucketMsgUpdateBucketResponse": {
      "type": "object"
    },
    "channelChannelMessage": {
      "type": "object",
      "properties": {
        "peer": {
          "$ref": "#/definitions/registryPeer",
          "description": "Owner is the peer that originated the message."
        },
        "did": {
          "$ref": "#/definitions/registryDid",
          "description": "Did is the identifier of the channel."
        },
        "data": {
          "$ref": "#/definitions/objectObjectDoc",
          "description": "Data is the data being sent."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Metadata is the metadata associated with the message."
        }
      },
      "description": "ChannelMessage is a message sent to a channel."
    },
    "channelMsgCreateChannelResponse": {
      "type": "object"
    },
    "channelMsgDeleteChannelResponse": {
      "type": "object"
    },
    "channelMsgReadChannelResponse": {
      "type": "object"
    },
    "channelMsgUpdateChannelResponse": {
      "type": "object"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "highwayv1MsgAccessNameResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "title": "Code of the response"
        },
        "message": {
          "type": "string",
          "title": "Message of the response"
        },
        "peer": {
          "$ref": "#/definitions/registryPeer",
          "title": "Data of the response"
        }
      },
      "title": "MsgAccessName is a response to a request for a name"
    },
    "highwayv1MsgAccessServiceResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "title": "Code of the response"
        },
        "message": {
          "type": "string",
          "title": "Message of the response"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Data of the response"
        }
      },
      "title": "AccessServiceResponse is a response to a request for a service"
    },
    "objectMsgCreateObjectResponse": {
      "type": "object"
    },
    "objectMsgDeleteObjectResponse": {
      "type": "object"
    },
    "objectMsgReadObjectResponse": {
      "type": "object"
    },
    "objectMsgUpdateObjectResponse": {
      "type": "object"
    },
    "objectObjectDoc": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "description": "Label is human-readable name of the bucket."
        },
        "description": {
          "type": "string",
          "description": "Description is a human-readable description of the bucket."
        },
        "did": {
          "type": "string",
          "description": "Did is the identifier of the object."
        },
        "bucketDid": {
          "type": "string",
          "description": "Bucket is the did of the bucket that contains this object."
        },
        "fields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/objectObjectField"
          },
          "description": "Fields are the fields associated with the object."
        }
      },
      "description": "ObjectDoc is a document for an Object stored in the graph."
    },
    "objectObjectField": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "title": "Label is the name of the field"
        },
        "type": {
          "$ref": "#/definitions/objectObjectFieldType",
          "title": "Type is the type of the field"
        },
        "did": {
          "type": "string",
          "description": "Did is the identifier of the field."
        },
        "stringValue": {
          "$ref": "#/definitions/objectObjectFieldText",
          "title": "String is the value of the field"
        },
        "numberValue": {
          "$ref": "#/definitions/objectObjectFieldNumber",
          "title": "Number is the value of the field"
        },
        "boolValue": {
          "$ref": "#/definitions/objectObjectFieldBool",
          "title": "Float is the value of the field"
        },
        "arrayValue": {
          "$ref": "#/definitions/objectObjectFieldArray",
          "title": "Array is the value of the field"
        },
        "timeStampValue": {
          "$ref": "#/definitions/objectObjectFieldTime",
          "description": "Time is defined by milliseconds since epoch."
        },
        "geopointValue": {
          "$ref": "#/definitions/objectObjectFieldGeopoint",
          "title": "Geopoint is the value of the field"
        },
        "blobValue": {
          "$ref": "#/definitions/objectObjectFieldBlob",
          "title": "Blob is the value of the field"
        },
        "blockchainAddrValue": {
          "$ref": "#/definitions/objectObjectFieldBlockchainAddress",
          "title": "Blockchain Address is the value of the field"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Metadata is additional info about the field"
        }
      },
      "description": "ObjectField is a field of an Object."
    },
    "objectObjectFieldArray": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "title": "Label is the name of the field"
        },
        "type": {
          "$ref": "#/definitions/objectObjectFieldType",
          "title": "Type is the type of the field"
        },
        "did": {
          "type": "string",
          "description": "Did is the identifier of the field."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/objectObjectField"
          },
          "title": "Entries are the values of the field"
        }
      },
      "description": "ObjectFieldArray is an array of ObjectFields to be stored in the graph object."
    },
    "objectObjectFieldBlob": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "title": "Label is the name of the field"
        },
        "did": {
          "type": "string",
          "description": "Did is the identifier of the field."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "title": "Value is the value of the field"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Metadata is additional info about the field"
        }
      },
      "description": "ObjectFieldBlob is a field of an Object for blobs."
    },
    "objectObjectFieldBlockchainAddress": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "title": "Label is the name of the field"
        },
        "did": {
          "type": "string",
          "description": "Did is the identifier of the field."
        },
        "value": {
          "type": "string",
          "title": "Value is the value of the field"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Metadata is additional info about the field"
        }
      },
      "description": "ObjectFieldBlockchainAddress is a field of an Object for blockchain addresses."
    },
    "objectObjectFieldBool": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "title": "Label is the name of the field"
        },
        "did": {
          "type": "string",
          "description": "Did is the identifier of the field."
        },
        "value": {
          "type": "boolean",
          "title": "Value is the value of the field"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Metadata is additional info about the field"
        }
      },
      "description": "ObjectFieldBool is a boolean field of an Object."
    },
    "objectObjectFieldGeopoint": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "title": "Label is the name of the field"
        },
        "type": {
          "$ref": "#/definitions/objectObjectFieldType",
          "title": "Type is the type of the field"
        },
        "did": {
          "type": "string",
          "description": "Did is the identifier of the field."
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "description": "Latitude is the geo-latitude of the point."
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "title": "Longitude is the geo-longitude of the field"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Metadata is additional info about the field"
        }
      },
      "description": "ObjectFieldGeopoint is a field of an Object for geopoints."
    },
    "objectObjectFieldNumber": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "title": "Label is the name of the field"
        },
        "did": {
          "type": "string",
          "description": "Did is the identifier of the field."
        },
        "value": {
          "type": "number",
          "format": "double",
          "title": "Value is the value of the field"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Metadata is additional info about the field"
        }
      },
      "description": "ObjectFieldNumber is a number field of an Object."
    },
    "objectObjectFieldText": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "title": "Label is the name of the field"
        },
        "did": {
          "type": "string",
          "description": "Did is the identifier of the field."
        },
        "value": {
          "type": "string",
          "title": "Value is the value of the field"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Metadata is additional info about the field"
        }
      },
      "description": "ObjectFieldText is a text field of an Object."
    },
    "objectObjectFieldTime": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "title": "Label is the name of the field"
        },
        "did": {
          "type": "string",
          "description": "Did is the identifier of the field."
        },
        "value": {
          "type": "string",
          "format": "int64",
          "title": "Value is the value of the field"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Metadata is additional info about the field"
        }
      },
      "description": "ObjectFieldTime is a time field of an Object."
    },
    "objectObjectFieldType": {
      "type": "string",
      "enum": [
        "OBJECT_FIELD_TYPE_UNSPECIFIED",
        "OBJECT_FIELD_TYPE_STRING",
        "OBJECT_FIELD_TYPE_NUMBER",
        "OBJECT_FIELD_TYPE_BOOL",
        "OBJECT_FIELD_TYPE_ARRAY",
        "OBJECT_FIELD_TYPE_TIMESTAMP",
        "OBJECT_FIELD_TYPE_GEOPOINT",
        "OBJECT_FIELD_TYPE_BLOB",
        "OBJECT_FIELD_TYPE_BLOCKCHAIN_ADDRESS"
      ],
      "default": "OBJECT_FIELD_TYPE_UNSPECIFIED",
      "description": "- OBJECT_FIELD_TYPE_UNSPECIFIED: ObjectFieldTypeUnspecified is the default value\n - OBJECT_FIELD_TYPE_STRING: ObjectFieldTypeString is a string or text field\n - OBJECT_FIELD_TYPE_NUMBER: ObjectFieldTypeInt is an integer\n - OBJECT_FIELD_TYPE_BOOL: ObjectFieldTypeBool is a boolean\n - OBJECT_FIELD_TYPE_ARRAY: ObjectFieldTypeArray is a list of values\n - OBJECT_FIELD_TYPE_TIMESTAMP: ObjectFieldTypeDateTime is a datetime\n - OBJECT_FIELD_TYPE_GEOPOINT: ObjectFieldTypeGeopoint is a geopoint\n - OBJECT_FIELD_TYPE_BLOB: ObjectFieldTypeBlob is a blob of data\n - OBJECT_FIELD_TYPE_BLOCKCHAIN_ADDRESS: ObjectFieldTypeETU is a pointer to an Ethereum account address.",
      "title": "ObjectFieldType is the type of the field"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "registryDid": {
      "type": "object",
      "properties": {
        "method": {
          "type": "string",
          "description": "Method is the method used to create the DID. For the Sonr network it is \"sonr\"."
        },
        "network": {
          "type": "string",
          "description": "Network is the network the DID is on. For testnet it is \"testnet\". i.e \"did:sonr:testnet:\"."
        },
        "id": {
          "type": "string",
          "title": "id is the trailing identifier after the network. i.e. \"did:sonr:testnet:abc123\""
        },
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Paths is a list of paths that the DID is valid for. This is used to identify the Service."
        },
        "query": {
          "type": "string",
          "description": "Query is the query string that was used to create the DID. This is followed by a '?'."
        },
        "fragment": {
          "type": "string",
          "description": "Fragment is the fragment string that was used to create the DID. This is followed by a '#'."
        }
      },
      "description": "Did represents a string that has been parsed and validated as a DID. The parts are stored\nin the individual fields."
    },
    "registryDidDocument": {
      "type": "object",
      "properties": {
        "context": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Context is the context of the DID document. This is used to identify the Service."
        },
        "id": {
          "type": "string",
          "description": "Id is the DID of the document."
        },
        "controller": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Controller is the DID of the controller of the document. This will be the individual user devices and mailboxes."
        },
        "verificationMethod": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/registryVerificationMethod"
          },
          "description": "VerificationMethod is the list of verification methods for the user."
        },
        "authentication": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Authentication is the list of authentication methods for the user."
        },
        "assertionMethod": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "AssertionMethod is the list of assertion methods for the user."
        },
        "capabilityInvocation": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "CapabilityInvocation is the list of capability invocation methods for the user."
        },
        "capabilityDelegation": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "CapabilityDelegation is the list of capability delegation methods for the user."
        },
        "keyAgreement": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "KeyAgreement is the list of key agreement methods for the user."
        },
        "service": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/registryService"
          },
          "description": "Service is the list of services or DApps that the user has access to."
        },
        "alsoKnownAs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "AlsoKnownAs is the list of \".snr\" aliases for the user."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Metadata is the metadata of the service."
        }
      },
      "description": "DidDocument is the document that describes a DID. This document is stored on the blockchain."
    },
    "registryMsgRegisterNameResponse": {
      "type": "object",
      "properties": {
        "isSuccess": {
          "type": "boolean"
        },
        "did": {
          "$ref": "#/definitions/registryDid"
        },
        "didDocument": {
          "$ref": "#/definitions/registryDidDocument"
        }
      }
    },
    "registryMsgRegisterServiceResponse": {
      "type": "object"
    },
    "registryMsgUpdateNameResponse": {
      "type": "object",
      "properties": {
        "didDocument": {
          "$ref": "#/definitions/registryDidDocument"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "registryMsgUpdateServiceResponse": {
      "type": "object",
      "properties": {
        "didDocument": {
          "$ref": "#/definitions/registryDidDocument"
        },
        "configuration": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "The updated configuration for the service"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "The metadata for any service information required"
        }
      }
    },
    "registryPeer": {
      "type": "object",
      "properties": {
        "sName": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/registryPeerStatus"
        },
        "device": {
          "$ref": "#/definitions/PeerDevice"
        },
        "profile": {
          "$ref": "#/definitions/registryProfile"
        },
        "publicKey": {
          "type": "string",
          "format": "byte"
        },
        "peerId": {
          "type": "string"
        },
        "lastModified": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "Basic Info Sent to Peers to Establish Connections"
    },
    "registryPeerStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_ONLINE",
        "STATUS_AWAY",
        "STATUS_BUSY"
      ],
      "default": "STATUS_UNSPECIFIED",
      "title": "Peers Active Status"
    },
    "registryProfile": {
      "type": "object",
      "properties": {
        "sName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "picture": {
          "type": "string",
          "format": "byte"
        },
        "bio": {
          "type": "string"
        },
        "lastModified": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "General Information about Peer passed during Authentication"
    },
    "registryService": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID is the DID of the service."
        },
        "type": {
          "$ref": "#/definitions/registryServiceType",
          "description": "Type is the type of the service."
        },
        "serviceEndpoint": {
          "$ref": "#/definitions/registryServiceEndpoint",
          "description": "ServiceEndpoint is the endpoint of the service."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Metadata is the metadata of the service."
        }
      },
      "description": "Service is a Application that runs on the Sonr network."
    },
    "registryServiceEndpoint": {
      "type": "object",
      "properties": {
        "transportType": {
          "type": "string",
          "description": "TransportType is the type of transport used to connect to the service."
        },
        "network": {
          "type": "string",
          "description": "Network is the network the service is on."
        },
        "supportedProtocols": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/registryServiceProtocol"
          },
          "title": "SupportedProtocols is the list of protocols supported by the service.\n(e.g. \"channels\", \"buckets\", \"objects\", \"storage\")"
        }
      },
      "description": "ServiceEndpoint is the endpoint of the service."
    },
    "registryServiceProtocol": {
      "type": "string",
      "enum": [
        "SERVICE_PROTOCOL_UNSPECIFIED",
        "SERVICE_PROTOCOL_BUCKETS",
        "SERVICE_PROTOCOL_CHANNEL",
        "SERVICE_PROTOCOL_OBJECTS",
        "SERVICE_PROTOCOL_FUNCTIONS"
      ],
      "default": "SERVICE_PROTOCOL_UNSPECIFIED",
      "description": "ServiceProtocol are core modules that can be installed on custom services on the Sonr network.\n\n - SERVICE_PROTOCOL_UNSPECIFIED: SERVICE_PROTOCOL_UNSPECIFIED is the default value.\n - SERVICE_PROTOCOL_BUCKETS: SERVICE_PROTOCOL_BUCKETS is the module that provides the ability to store and retrieve data.\n - SERVICE_PROTOCOL_CHANNEL: SERVICE_PROTOCOL_CHANNEL is the module that provides the ability to communicate with other services.\n - SERVICE_PROTOCOL_OBJECTS: SERVICE_PROTOCOL_OBJECTS is the module that provides the ability to create new schemas for data on the network.\n - SERVICE_PROTOCOL_FUNCTIONS: SERVICE_PROTOCOL_FUNCTIONS is the module that provides the ability to create new functions for data on the network."
    },
    "registryServiceType": {
      "type": "string",
      "enum": [
        "SERVICE_TYPE_UNSPECIFIED",
        "SERVICE_TYPE_DID_COMM_MESSAGING",
        "SERVICE_TYPE_LINKED_DOMAINS",
        "SERVICE_TYPE_SONR"
      ],
      "default": "SERVICE_TYPE_UNSPECIFIED",
      "description": "ServiceType is the type of service that is being registered.\n\n - SERVICE_TYPE_UNSPECIFIED: SERVICE_TYPE_UNSPECIFIED is the default value.\n - SERVICE_TYPE_DID_COMM_MESSAGING: SERVICE_TYPE_APPLICATION is the type of service that is a DApp.\n - SERVICE_TYPE_LINKED_DOMAINS: SERVICE_TYPE_SERVICE is the type of service that is a service.\n - SERVICE_TYPE_SONR: SERVICE_TYPE_SONR is the type of service that is a DApp."
    },
    "registryVerificationMethod": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID is the DID of the verification method."
        },
        "type": {
          "$ref": "#/definitions/VerificationMethodType",
          "description": "Type is the type of the verification method."
        },
        "controller": {
          "type": "string",
          "description": "Controller is the DID of the controller of the verification method."
        },
        "publicKeyHex": {
          "type": "string",
          "description": "PublicKeyHex is the public key of the verification method in hexidecimal."
        },
        "publicKeyBase58": {
          "type": "string",
          "description": "PublicKeyBase58 is the public key of the verification method in base58."
        },
        "blockchainAccountId": {
          "type": "string",
          "description": "BlockchainAccountId is the blockchain account id of the verification method."
        }
      },
      "description": "VerificationMethod is a method that can be used to verify the DID."
    },
    "v1MsgDeleteBlobResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "title": "Code of the response"
        },
        "message": {
          "type": "string",
          "title": "Message of the response"
        },
        "did": {
          "$ref": "#/definitions/registryDid",
          "title": "DID of the response"
        }
      },
      "title": "MsgDeleteBlobResponse is a response to a request to delete a blob"
    },
    "v1MsgDownloadBlobResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "title": "Code of the response"
        },
        "message": {
          "type": "string",
          "title": "Message of the response"
        },
        "did": {
          "$ref": "#/definitions/registryDid",
          "title": "DID of the response"
        },
        "path": {
          "type": "string",
          "title": "Path of downloaded blob"
        }
      },
      "title": "MsgDownloadBlobResponse is a response to a request to download a blob"
    },
    "v1MsgResolveDidResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "title": "Code of the response"
        },
        "message": {
          "type": "string",
          "title": "Message of the response"
        },
        "didDocument": {
          "$ref": "#/definitions/registryDidDocument",
          "title": "DID of the response"
        }
      },
      "title": "MsgResolveDidResponse is a response to a request to resolve a DID"
    },
    "v1MsgSyncBlobResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "title": "Code of the response"
        },
        "message": {
          "type": "string",
          "title": "Message of the response"
        },
        "did": {
          "$ref": "#/definitions/registryDid",
          "title": "DID of the response"
        }
      },
      "title": "MsgSyncBlobResponse is a response to a request to sync a blob"
    },
    "v1MsgUploadBlobResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "title": "Code of the response"
        },
        "message": {
          "type": "string",
          "title": "Message of the response"
        },
        "did": {
          "$ref": "#/definitions/registryDid",
          "title": "DID of the response"
        },
        "pinned": {
          "type": "boolean",
          "title": "Pinned is true if the blob is pinned to IPFS"
        }
      },
      "title": "MsgUploadBlobResponse is a response to a request to upload a blob"
    }
  }
}
