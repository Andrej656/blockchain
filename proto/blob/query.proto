syntax = "proto3";
package sonrio.sonr.blob;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "blob/params.proto";
import "blob/there_is.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/sonr-io/sonr/x/blob/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sonrio/sonr/blob/params";
  }
  // Queries a ThereIs by index.
	rpc ThereIs(QueryGetThereIsRequest) returns (QueryGetThereIsResponse) {
		option (google.api.http).get = "/sonr-io/sonr/blob/there_is/{index}";
	}

	// Queries a list of ThereIs items.
	rpc ThereIsAll(QueryAllThereIsRequest) returns (QueryAllThereIsResponse) {
		option (google.api.http).get = "/sonr-io/sonr/blob/there_is";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetThereIsRequest {
	  string index = 1;

}

message QueryGetThereIsResponse {
	ThereIs thereIs = 1 [(gogoproto.nullable) = false];
}

message QueryAllThereIsRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllThereIsResponse {
	repeated ThereIs thereIs = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
