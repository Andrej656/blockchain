/* eslint-disable */
import { Authenticator } from "../registry/authenticator";
import { Writer, Reader } from "protobufjs/minimal";

export const protobufPackage = "sonrio.sonr.registry";

export interface Credential {
  /** A probabilistically-unique byte sequence identifying a public key credential source and its authentication assertions. */
  i_d: Uint8Array;
  /**
   * The public key portion of a Relying Party-specific credential key pair, generated by an authenticator and returned to
   * a Relying Party at registration time (see also public key credential). The private key portion of the credential key
   * pair is known as the credential private key. Note that in the case of self attestation, the credential key pair is also
   * used as the attestation key pair, see self attestation for details.
   */
  public_key: Uint8Array;
  /** The attestation format used (if any) by the authenticator when creating the credential. */
  attestation_type: string;
  /** The Authenticator information for a given certificate */
  authenticator: Authenticator | undefined;
}

const baseCredential: object = { attestation_type: "" };

export const Credential = {
  encode(message: Credential, writer: Writer = Writer.create()): Writer {
    if (message.i_d.length !== 0) {
      writer.uint32(10).bytes(message.i_d);
    }
    if (message.public_key.length !== 0) {
      writer.uint32(18).bytes(message.public_key);
    }
    if (message.attestation_type !== "") {
      writer.uint32(26).string(message.attestation_type);
    }
    if (message.authenticator !== undefined) {
      Authenticator.encode(
        message.authenticator,
        writer.uint32(34).fork()
      ).ldelim();
    }
    return writer;
  },

  decode(input: Reader | Uint8Array, length?: number): Credential {
    const reader = input instanceof Uint8Array ? new Reader(input) : input;
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseCredential } as Credential;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.i_d = reader.bytes();
          break;
        case 2:
          message.public_key = reader.bytes();
          break;
        case 3:
          message.attestation_type = reader.string();
          break;
        case 4:
          message.authenticator = Authenticator.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Credential {
    const message = { ...baseCredential } as Credential;
    if (object.i_d !== undefined && object.i_d !== null) {
      message.i_d = bytesFromBase64(object.i_d);
    }
    if (object.public_key !== undefined && object.public_key !== null) {
      message.public_key = bytesFromBase64(object.public_key);
    }
    if (
      object.attestation_type !== undefined &&
      object.attestation_type !== null
    ) {
      message.attestation_type = String(object.attestation_type);
    } else {
      message.attestation_type = "";
    }
    if (object.authenticator !== undefined && object.authenticator !== null) {
      message.authenticator = Authenticator.fromJSON(object.authenticator);
    } else {
      message.authenticator = undefined;
    }
    return message;
  },

  toJSON(message: Credential): unknown {
    const obj: any = {};
    message.i_d !== undefined &&
      (obj.i_d = base64FromBytes(
        message.i_d !== undefined ? message.i_d : new Uint8Array()
      ));
    message.public_key !== undefined &&
      (obj.public_key = base64FromBytes(
        message.public_key !== undefined ? message.public_key : new Uint8Array()
      ));
    message.attestation_type !== undefined &&
      (obj.attestation_type = message.attestation_type);
    message.authenticator !== undefined &&
      (obj.authenticator = message.authenticator
        ? Authenticator.toJSON(message.authenticator)
        : undefined);
    return obj;
  },

  fromPartial(object: DeepPartial<Credential>): Credential {
    const message = { ...baseCredential } as Credential;
    if (object.i_d !== undefined && object.i_d !== null) {
      message.i_d = object.i_d;
    } else {
      message.i_d = new Uint8Array();
    }
    if (object.public_key !== undefined && object.public_key !== null) {
      message.public_key = object.public_key;
    } else {
      message.public_key = new Uint8Array();
    }
    if (
      object.attestation_type !== undefined &&
      object.attestation_type !== null
    ) {
      message.attestation_type = object.attestation_type;
    } else {
      message.attestation_type = "";
    }
    if (object.authenticator !== undefined && object.authenticator !== null) {
      message.authenticator = Authenticator.fromPartial(object.authenticator);
    } else {
      message.authenticator = undefined;
    }
    return message;
  },
};

declare var self: any | undefined;
declare var window: any | undefined;
var globalThis: any = (() => {
  if (typeof globalThis !== "undefined") return globalThis;
  if (typeof self !== "undefined") return self;
  if (typeof window !== "undefined") return window;
  if (typeof global !== "undefined") return global;
  throw "Unable to locate global object";
})();

const atob: (b64: string) => string =
  globalThis.atob ||
  ((b64) => globalThis.Buffer.from(b64, "base64").toString("binary"));
function bytesFromBase64(b64: string): Uint8Array {
  const bin = atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

const btoa: (bin: string) => string =
  globalThis.btoa ||
  ((bin) => globalThis.Buffer.from(bin, "binary").toString("base64"));
function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  for (let i = 0; i < arr.byteLength; ++i) {
    bin.push(String.fromCharCode(arr[i]));
  }
  return btoa(bin.join(""));
}

type Builtin = Date | Function | Uint8Array | string | number | undefined;
export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Array<infer U>
  ? Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;
