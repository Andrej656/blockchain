// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: registry/who_is.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// WhoIs is the entry pointing a registered name to a user account address, Did Url string, and a DIDDocument.
type WhoIs struct {
	// Name is the registered name of the User
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// DID is the DID of the account
	Did string `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	// Document is the DID Document of the registered name and account encoded as JSON
	Document []byte `protobuf:"bytes,3,opt,name=document,proto3" json:"document,omitempty"`
	// Creator is the DID of the creator of the DID Document
	Creator string `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	// Credentials are the biometric info of the registered name and account encoded with public key
	Credentials []*Credential `protobuf:"bytes,5,rep,name=credentials,proto3" json:"credentials,omitempty"`
	// ID is the unique identifier of the entry used for Webauthn
	Id []byte `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *WhoIs) Reset()         { *m = WhoIs{} }
func (m *WhoIs) String() string { return proto.CompactTextString(m) }
func (*WhoIs) ProtoMessage()    {}
func (*WhoIs) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d9bdfc8d37d9424, []int{0}
}
func (m *WhoIs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhoIs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhoIs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhoIs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhoIs.Merge(m, src)
}
func (m *WhoIs) XXX_Size() int {
	return m.Size()
}
func (m *WhoIs) XXX_DiscardUnknown() {
	xxx_messageInfo_WhoIs.DiscardUnknown(m)
}

var xxx_messageInfo_WhoIs proto.InternalMessageInfo

func (m *WhoIs) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WhoIs) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *WhoIs) GetDocument() []byte {
	if m != nil {
		return m.Document
	}
	return nil
}

func (m *WhoIs) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *WhoIs) GetCredentials() []*Credential {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *WhoIs) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func init() {
	proto.RegisterType((*WhoIs)(nil), "sonrio.sonr.registry.WhoIs")
}

func init() { proto.RegisterFile("registry/who_is.proto", fileDescriptor_9d9bdfc8d37d9424) }

var fileDescriptor_9d9bdfc8d37d9424 = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0xad, 0x93, 0xb6, 0x80, 0x8b, 0x10, 0xb2, 0x40, 0x32, 0x1d, 0xac, 0x88, 0x29, 0x0b, 0x8e,
	0x04, 0x7f, 0x50, 0x16, 0x58, 0xb3, 0x20, 0xb1, 0xa0, 0xc4, 0xb6, 0x9a, 0x13, 0x4d, 0xae, 0xb2,
	0x5d, 0x41, 0xff, 0x82, 0xbf, 0xe1, 0x17, 0x18, 0x3b, 0x32, 0xa2, 0xe4, 0x47, 0x50, 0x8c, 0x1a,
	0x18, 0x98, 0xee, 0xbd, 0xd3, 0x7b, 0xf7, 0x4e, 0x8f, 0x9e, 0x5b, 0xb3, 0x04, 0xe7, 0xed, 0x36,
	0x7b, 0xa9, 0xf0, 0x09, 0x9c, 0x5c, 0x5b, 0xf4, 0xc8, 0xce, 0x1c, 0x36, 0x16, 0x50, 0xf6, 0x43,
	0xee, 0x25, 0xf3, 0x8b, 0x41, 0xac, 0xac, 0xd1, 0xa6, 0xf1, 0x50, 0xac, 0x7e, 0x0c, 0x97, 0xef,
	0x84, 0x4e, 0x1e, 0x2a, 0xbc, 0x77, 0x8c, 0xd1, 0x71, 0x53, 0xd4, 0x86, 0x93, 0x84, 0xa4, 0x47,
	0x79, 0xc0, 0xec, 0x94, 0xc6, 0x1a, 0x34, 0x8f, 0xc2, 0xaa, 0x87, 0x6c, 0x4e, 0x0f, 0x35, 0xaa,
	0x4d, 0x6d, 0x1a, 0xcf, 0xe3, 0x84, 0xa4, 0xc7, 0xf9, 0xc0, 0x19, 0xa7, 0x07, 0xca, 0x9a, 0xc2,
	0xa3, 0xe5, 0xe3, 0xe0, 0xd8, 0x53, 0xb6, 0xa0, 0xb3, 0xdf, 0x64, 0xc7, 0x27, 0x49, 0x9c, 0xce,
	0xae, 0x13, 0xf9, 0xdf, 0xb3, 0xf2, 0x76, 0x10, 0xe6, 0x7f, 0x4d, 0xec, 0x84, 0x46, 0xa0, 0xf9,
	0x34, 0x64, 0x46, 0xa0, 0x17, 0x77, 0x1f, 0xad, 0x20, 0xbb, 0x56, 0x90, 0xaf, 0x56, 0x90, 0xb7,
	0x4e, 0x8c, 0x76, 0x9d, 0x18, 0x7d, 0x76, 0x62, 0xf4, 0x28, 0x97, 0xe0, 0xab, 0x4d, 0x29, 0x15,
	0xd6, 0x59, 0x7f, 0xfb, 0x0a, 0x30, 0x2b, 0x57, 0xa8, 0x9e, 0x55, 0x55, 0x40, 0x93, 0xbd, 0x66,
	0x43, 0x1d, 0x7e, 0xbb, 0x36, 0xae, 0x9c, 0x86, 0x2a, 0x6e, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x0d, 0x9e, 0xd3, 0xe4, 0x54, 0x01, 0x00, 0x00,
}

func (m *WhoIs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhoIs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhoIs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintWhoIs(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Credentials) > 0 {
		for iNdEx := len(m.Credentials) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Credentials[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWhoIs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintWhoIs(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Document) > 0 {
		i -= len(m.Document)
		copy(dAtA[i:], m.Document)
		i = encodeVarintWhoIs(dAtA, i, uint64(len(m.Document)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintWhoIs(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintWhoIs(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWhoIs(dAtA []byte, offset int, v uint64) int {
	offset -= sovWhoIs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WhoIs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWhoIs(uint64(l))
	}
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovWhoIs(uint64(l))
	}
	l = len(m.Document)
	if l > 0 {
		n += 1 + l + sovWhoIs(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovWhoIs(uint64(l))
	}
	if len(m.Credentials) > 0 {
		for _, e := range m.Credentials {
			l = e.Size()
			n += 1 + l + sovWhoIs(uint64(l))
		}
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovWhoIs(uint64(l))
	}
	return n
}

func sovWhoIs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWhoIs(x uint64) (n int) {
	return sovWhoIs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WhoIs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWhoIs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhoIs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhoIs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhoIs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhoIs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhoIs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhoIs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Document", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWhoIs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWhoIs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Document = append(m.Document[:0], dAtA[iNdEx:postIndex]...)
			if m.Document == nil {
				m.Document = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhoIs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhoIs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWhoIs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWhoIs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credentials = append(m.Credentials, &Credential{})
			if err := m.Credentials[len(m.Credentials)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWhoIs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWhoIs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWhoIs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWhoIs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWhoIs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWhoIs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWhoIs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWhoIs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWhoIs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWhoIs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWhoIs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWhoIs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWhoIs = fmt.Errorf("proto: unexpected end of group")
)
